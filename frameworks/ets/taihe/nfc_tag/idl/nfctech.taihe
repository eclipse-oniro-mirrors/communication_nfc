/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!sts_inject("""
static { loadLibrary("nfc_fwk_taihe_tag.z"); }
""")

from tagSession use TagSession;
from ohos.nfc.tag.tag use NdefRecord, NfcForumType, MifareClassicType, MifareUltralightType;

interface NfcATag: TagSession {
  getSak(): i32;
  getAtqa(): Array<i32>;
}

interface NfcBTag: TagSession {
  getRespAppData(): Array<i32>;
  getRespProtocol(): Array<i32>;
}

interface NfcFTag: TagSession {
  getSystemCode(): Array<i32>;
  getPmm(): Array<i32>;
}

interface NfcVTag: TagSession {
  getResponseFlags(): i32;
  getDsfId(): i32;
}

interface IsoDepTag: TagSession {
  getHistoricalBytes(): Array<i32>;
  getHiLayerResponse(): Array<i32>;

  @gen_async("isExtendedApduSupportedAsync")
  @gen_promise("isExtendedApduSupportedPromise")
  isExtendedApduSupported(): bool;
}

interface NdefMessage {
  getNdefRecords(): Array<NdefRecord>;
}

interface NdefTag: TagSession {
  getNdefTagType(): NfcForumType;
  getNdefMessage(): NdefMessage;
  isNdefWritable(): bool;

  @gen_async("readNdefAsync")
  @gen_promise("readNdefPromise")
  readNdef(): NdefMessage;

  @gen_async("writeNdefAsync")
  @gen_promise("writeNdefPromise")
  writeNdef(msg: NdefMessage): void;

  canSetReadOnly(): bool;

  @gen_async("setReadOnlyAsync")
  @gen_promise("setReadOnlyPromise")
  setReadOnly(): void;

  getNdefTagTypeString(type: String): String;
}

interface MifareClassicTag: TagSession {
  @gen_async("authenticateSectorAsync")
  @gen_promise("authenticateSectorPromise")
  authenticateSector(sectorIndex: i32, key: Array<i32>, isKeyA: bool): void;

  @gen_async("readSingleBlockAsync")
  @gen_promise("readSingleBlockPromise")
  readSingleBlock(blockIndex: i32): Array<i32>;

  @gen_async("writeSingleBlockAsync")
  @gen_promise("writeSingleBlockPromise")
  writeSingleBlock(blockIndex: i32, data: Array<i32>): void;

  @gen_async("incrementBlockAsync")
  @gen_promise("incrementBlockPromise")
  incrementBlock(blockIndex: i32, value: i32): void;

  @gen_async("decrementBlockAsync")
  @gen_promise("decrementBlockPromise")
  decrementBlock(blockIndex: i32, value: i32): void;

  @gen_async("transferToBlockAsync")
  @gen_promise("transferToBlockPromise")
  transferToBlock(blockIndex: i32): void;

  @gen_async("restoreFromBlockAsync")
  @gen_promise("restoreFromBlockPromise")
  restoreFromBlock(blockIndex: i32): void;

  getSectorCount(): i32;
  getBlockCountInSector(sectorIndex: i32): i32;
  getType(): MifareClassicType;
  getTagSize(): i32;
  isEmulatedTag(): bool;
  getBlockIndex(sectorIndex: i32): i32;
  getSectorIndex(blockIndex: i32): i32;
}

interface MifareUltralightTag: TagSession {
  @gen_async("readMultiplePagesAsync")
  @gen_promise("readMultiplePagesPromise")
  readMultiplePages(pageIndex: i32): Array<i32>;

  @gen_async("writeSinglePageAsync")
  @gen_promise("writeSinglePagePromise")
  writeSinglePage(pageIndex: i32, data: Array<i32>): void;

  getType(): MifareUltralightType;
}

interface NdefFormatableTag: TagSession {
  @gen_async("formatAsync")
  @gen_promise("formatPromise")
  format(message: NdefMessage): void;

  @gen_async("formatReadOnlyAsync")
  @gen_promise("formatReadOnlyPromise")
  formatReadOnly(message: NdefMessage): void;
}