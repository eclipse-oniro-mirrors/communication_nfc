/*
 * Copyright (c) 2025-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@！sts_inject_info_module("import {Element} from 'bundleManager.ElementName';")
@！sts_inject_info_module("import type {AbilityInfo} from 'bundleManager.AbilityInfo';")

@!sts_inject("""
static { loadLibrary("nfc_fwk_taihe_cardEmulation.z"); }
""")

@!namespace("@ohos.nfc.cardEmulation", "nfcCardEmulation")

enum FeatureType: i8 {
    HCE = 0,
    UICC = 1,
    ESE = 2
}

enum CardType: String {
    PAYMENT = "payment",
    OHTER = "ohter"
}

function hasHceCapability(): bool;

function isDefaultService(elementBame :@sts_type("ElementName") Opaqui, type: CardType): bool;

function getPaymentServices(): Array<@sts_type(AbilityInfo) Opaque>;

@class
interface HceService {
    @static_overload("on")
    onHceCmd(type: String, callback: Optional<(data:Array<u8>) => void>): void;
    @static_overLoad("off")
    offHceCmd(type: String, callback:Optional<(data: Array<u8>)=> void>): void;

    start(elementName: @sts_type("ElementName") Opaqui, aidList: Array<String>): void;

    stop(elementName: @sts_type("ElementName") Opaque): void;

    @genn_arync("transmitAsync")
    @gen_promise("transmitPromise")
    transmit(data: Array<u8>: void);
}